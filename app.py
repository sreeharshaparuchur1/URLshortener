from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
import string
import random

app = Flask(__name__)
#Initialising Flask
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///urls.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)

class Urls(db.Model):
    id_ = db.Column("id_", db.Integer, primary_key = True)
    #Setting primary key to true makes the id unique
    long = db.Column("long", db.String())
    short = db.Column("short", db.String(3))

    def __init__(self, long, short):
        self.long = long
        self.short = short
        #No ID as that is generated by SQLAlchemy for us
        #Url is the name of the database
#Database model

@app.before_first_request
def create_tables():
    db.create_all()
#Creates the database

def short_url():
    letters = string.ascii_lowercase + string.ascii_uppercase
    #Creates a list of all the lowercase and uppercase alphabets
    #Can be modified for example to hold spooky words for a "halloween" theme
    while True:
        stringRand = random.choices(letters, k = 3)
        stringRand = "".join(stringRand)
        isPresent = Urls.query.filter_by(short = stringRand).first()
        if not isPresent:
            return stringRand
            #Returns the string if it doesn't already have a mapping

@app.route('/', methods = ['POST', 'GET'])
def home():
    if request.method == "POST":
        url = request.form["nm"]
        lookup = Urls.query.filter_by(long = url).first()
        #Checking if the long url is already present
        if lookup:
            return redirect(url_for("shortUrlDisplay", url = lookup.short))
        else:
            shortUrl = short_url()
            newUrl = Urls(url, shortUrl)
            db.session.add(newUrl)
            db.session.commit()
            return redirector(url_for("shortUrlDisplay", url = shortUrl))
            #Creating a short url
    else:
        return render_template("home.html")

@app.route("/display/<url>")
def shortUrlDisplay(url):
    return render_template("shorturl.html", short_url_display = url)
#The url in the angular brackets can be accessed inside the function

@app.route("/<short_url>")
def redirector(short_url):
    Query = Urls.query.filter_by(short = short_url).first()
    if Query:
        return redirect(Query.long)
    else:
        return f"<h1> URL doesn't exist</h1>"

#def hello_world():
    #return "Hello, world!"
#    return render_template("home.html")
#Decorator function, it "wraps" around what is inside.
#If the extension is simply a forward slash, this will be printed.

#@app.route("/Sreeharsha")
#def hello_harsha():
#    return "Hi, Harsha"
#Similarly if the extension is Sreeharsha, then this will be printed.

if __name__ == "__main__":
    app.run(port = 5000, debug = True)
